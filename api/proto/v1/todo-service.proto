syntax = "proto3";
package v1;

import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";

option go_package="pkg/api/v1";



option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
	info: {
		title: "ToDo service";
		version: "1.0";
		contact: {
			name: "go-grpc-http-rest-microservice-tutorial project";
			url: "https://github.com/amsokol/go-grpc-http-rest-microservice-tutorial";
			email: "medium@amsokol.com";
        };
    };
    schemes: HTTP;
    consumes: "application/json";
    produces: "application/json";
    responses: {
		key: "404";
		value: {
			description: "Returned when the resource does not exist.";
			schema: {
				json_schema: {
					type: STRING;
				}
			}
		}
	}
};


service ToDoService {
    // Create new todo task
    rpc Create(CreateRequest) returns (CreateRespone) {
        option (google.api.http) = {
            post: "/v1/todo"
            body: "*"
        };
    };

    // Read todo task
    rpc Read(ReadRequest) returns (ReadResponse){
        option (google.api.http) = {
            get: "/v1/todo/{id}"
        };
    };

    // Update todo task
    rpc Update(UpdateRequest) returns (UpdateResponse){
        option (google.api.http) = {
            put: "/v1/todo/{todo.id}"
            body: "*"

            additional_bindings {
                patch: "/v1/todo/{todo.id}"
                body: "*"
            }
        };
    };

    // Delete todo task
    rpc Delete(DeleteRequest) returns (DeleteResponse){
        option (google.api.http) = {
            delete: "/v1/todo/{id}"
        };
    };

    // Read all todo tasks
    rpc ReadAll(ReadAllRequest) returns (ReadAllResponse) {
        option (google.api.http) = {
            get: "/v1/todo/all"
        };
    };
}

message CreateRequest {
    // Best practice to specify the version explicity
    string api = 1;
    ToDo todo = 2;
}

message CreateRespone {
    string api = 1;
      // Return todo ID if created successful
    string id = 2;
}

message ReadRequest {
    string api = 1;
    string id = 2;
}

message ReadResponse {
    string api = 1;
    ToDo todo = 2;

}

message UpdateRequest {
    string api = 1;
    ToDo todo = 2;
}

message UpdateResponse {
    string api = 1;
    // Contains number of entities have been updated
    // Equals 1 in case of succesfull update
    int64 updated = 2;
}

message DeleteRequest{
    string api = 1;
    string id = 2;
}

// Contains status of delete operation
message DeleteResponse{
    string api = 1;
    // Contains number of entities have beed deleted
    // Equals 1 in case of succesfull delete
    int64 deleted = 2;
}

message ReadAllRequest{
    string api = 1;
}

message ReadAllResponse{
    string api = 1;
    repeated ToDo toDos = 2;
}


message ToDo {
    // Id generate with google/uuid.new().string()
    string id = 1;
    string title = 2;
    string description = 3;
    // Special data type from google/protobuf
    google.protobuf.Timestamp reminder = 4;
}